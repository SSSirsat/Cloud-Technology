import json

def lambda_handler(event, context):
    output_records = []
    
    for record in event['records']:
        payload = base64.b64decode(record['data']).decode('utf-8')
        log_lines = payload.strip().split('\n')
        
        for line in log_lines:
            try:
                json_data = json.loads(line)
                single_line_json = json.dumps(json_data)
                output_records.append({
                    'recordId': record['recordId'],
                    'result': 'Ok',
                    'data': base64.b64encode(single_line_json.encode('utf-8')).decode('utf-8')
                })
            except Exception as e:
                output_records.append({
                    'recordId': record['recordId'],
                    'result': 'ProcessingFailed',
                    'data': record['data']
                })
    
    return {'records': output_records}

=============================+++++++++++++++++++++++++++++------------**********************???????????????//////////////////+++++++++++++=================
===========================================================================================================================================================
import base64
import gzip

 

def lambda_handler(event, context):
    print(event)
    output_records = []

    for record in event['records']:
        payload = base64.b64decode(record['data'])
        payload = gzip.decompress(payload).decode("utf-8")
        print(payload)
        modified_payload = convert_to_single_line_json(payload)

        output_record = {
            'recordId': record['recordId'],
            'result': 'Ok',
            'data': base64.b64encode(modified_payload.encode('utf-8')).decode('utf-8')
        }

        output_records.append(output_record)

    return {'records': output_records}

 

def convert_to_single_line_json(payload):
    parsed_payload = json.loads(payload)
    single_line_payload = json.dumps(parsed_payload)
    return single_line_payload